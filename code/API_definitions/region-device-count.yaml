openapi: 3.0.3
info:
  title: Region Device Count
  description: |
    This API allows for the API Consumer to query device count in the specified area during a certain time interval.The query area can be a circle or a polygon composed of longitude and latitude points.
  version: wip
  contact:
    email: sp-ruc@lists.camaraproject.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
externalDocs:
  description: Project documentation at CAMARA
  url: https://github.com/camaraproject/RegionDeviceCount
servers:
  - url: '{apiRoot}/regionDeviceCount/vwip'
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
tags:
  - name: Region Device Count
    description: This API allows for the API Consumer to query device count in the specified area during a certain time interval.The query area can be a circle or a polygon composed of longitude and latitude points.
paths:
  /count:
    post:
      tags:
        - Region Device Count
      summary: API operation to get the device count in the specified area during a certain time interval.
      description: |
        Get the number of devices in the specified area during a certain time interval.
        - The query area can be a circle or a polygon composed of longitude and latitude points.
        - If the areaType is circle, the circleCenter and circleRadius must be provided; if the area is a polygon, the point list must be provided.
        - If starttime and endtime are not passed in,this api should return the current number of devices in the area.
        - If the device appears in the specified area at least once during the certain time interval, it should be counted.
        
      operationId: count
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegionDeviceCountRequestBody'
            examples:
                LOCATION_CIRCLE:
                  $ref: "#/components/examples/RETRIEVAL_CIRCLE"
                LOCATION_POLYGON:
                  $ref: "#/components/examples/RETRIEVAL_POLYGON"
        required: true
      responses:
        '200':
          description: OK
          headers:
            x-correlator:
             $ref: "#/components/headers/x-correlator"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionDeviceCountResponse'
              examples:
                SUPPORTED_AREA:
                  $ref: "#/components/examples/SUPPORTED_AREA"
                PART_OF_AREA_NOT_SUPPORTED:
                  $ref: "#/components/examples/PART_OF_AREA_NOT_SUPPORTED"
                AREA_NOT_SUPPORTED:
                  $ref: "#/components/examples/AREA_NOT_SUPPORTED"
                DENSITY_BELOW_PRIVACY_THRESHOLD:
                  $ref: "#/components/examples/DENSITY_BELOW_PRIVACY_THRESHOLD"
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '500':
          $ref: '#/components/responses/Generic500'
        '503':
          $ref: '#/components/responses/Generic503'
        '504':
          $ref: '#/components/responses/Generic504'
      security:
        - openId:
          - region-device-count
components:
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        type: string
  parameters:
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        type: string
  schemas:
    RegionDeviceCountRequestBody:
      type: object
      description: Payload to get the count of devices in the specific region.
      properties:
        area:
          $ref: "#/components/schemas/Area"
        starttime: 
          type: string
          format: date-time
          description: Starting timestamp for counting the number of devices in the area. It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone. Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
          nullable: true
          example: "2023-07-03T14:27:08.312+02:00"
        endtime: 
          type: string
          format: date-time
          description: Ending timestamp for counting the number of devices in the area. It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone. Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-04T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)
          nullable: true
          example: "2023-07-04T14:27:08.312+02:00"
        filter: 
          $ref: "#/components/schemas/Filter"
    Area:
      type: object
      properties:
        areaType:
          $ref: "#/components/schemas/AreaType"
      required:
        - areaType
      discriminator:
        propertyName: areaType
        mapping:
          CIRCLE: "#/components/schemas/Circle"
          POLYGON: "#/components/schemas/Polygon"
    AreaType:
      type: string
      description: |
        Type of this area.
        CIRCLE - The area is defined as a circle.
        POLYGON - The area is defined as a polygon.
      enum:
        - CIRCLE
        - POLYGON

    Circle:
      description: Circular area
      allOf:
        - $ref: "#/components/schemas/Area"
        - type: object
          required:
            - center
            - radius
          properties:
            center:
              $ref: "#/components/schemas/Point"
            radius:
              type: number
              description: Distance from the center in meters
              minimum: 1

    Polygon:
      allOf:
        - $ref: "#/components/schemas/Area"
        - type: object
          required:
            - boundary
          properties:
            boundary:
              $ref: "#/components/schemas/PointList"

    PointList:
      type: array
      items:
        $ref: "#/components/schemas/Point"
      minItems: 3
      maxItems: 15

    Point:
      type: object
      description: Coordinates (latitude, longitude) defining a location in a map
      required:
        - latitude
        - longitude
      properties:
        latitude:
          $ref: "#/components/schemas/Latitude"
        longitude:
          $ref: "#/components/schemas/Longitude"
      example:
        latitude: 50.735851
        longitude: 7.10066

    Latitude:
      description: Latitude component of a location
      type: number
      format: double
      minimum: -90
      maximum: 90

    Longitude:
      description: Longitude component of location
      type: number
      format: double
      minimum: -180
      maximum: 180
    Filter:
      description: | 
        This parameter is used to filter devices. Currently, two filtering criteria are defined, `roamingStatus` and `deviceType`, which can be expanded in the future. 
        `IN` logic is used used for multiple filtering items within a single filtering criterion, `AND` logic is used between multiple filtering criteria.
        - If a filtering critera is not provided, it means that there is no need to filter this item.
        - At least one of the criteria must be provided,a filter without any criteria is not allowed.
        - If no filtering is required, this parameter does not need to be provided.
        For example ,`"filter":{"roamingStatus": ["roaming"],"deviceType": ["human device","IoT device"]}` means the API need to return the count of human network devices and IoT devices that are in roaming mode.
        `"filter":{"roamingStatus": ["non-roaming"]}` means that the API need to return the count of all devices that are not in roaming mode.
      type: object
      properties: 
        roamingStatus: 
          description: Filter whether the device is in roaming mode,'roaming' represents the need to filter devices that are in roaming mode,'non-roaming' represents the need to filter devices that are not roaming.
          type: array
          items:
            type: string
            enum:
              - 'roaming'
              - 'non-roaming'
          minItems: 1
        deviceType: 
          description: Filtering by device type, 'human device' represents the need to filter for human network devices, 'IoT device' represents the need to filter for IoT devices, and 'other' represents the need to filter for other types of devices.
          type: array
          items:
            type: string
            enum:
              - 'human device'
              - 'IoT device'
              - 'other'
          minItems: 1
    RegionDeviceCountResponse:
      type: object
      description: RegionDeviceCount result
      required:
        - count
      properties:
        count:
          $ref: '#/components/schemas/Count'
        status:
          $ref: '#/components/schemas/Status'
    Count:
      description: Device Count
      type: number
    Status:
      description: | 
        SUPPORTED_AREA: The whole requested area is supported Region Device Count for the entire requested area is returned - Telco Coverage = 100 %
        
        PART_OF_AREA_NOT_SUPPORTED: Part of the requested area is outside the MNOs coverage area, the area outside the coverage area are not returned - 100% >Telco Coverage >=50%
        
        AREA_NOT_SUPPORTED:  The whole requested area is outside the MNO coverage area No data will be returned- Telco Coverage <50%
        
        DENSITY_BELOW_PRIVACY_THRESHOLD:  The number of connected devices is below privacy threshold of local regulation
        
        TIME_INTERVAL_NO_DATA_FOUND: Unable to find device count data within the requested time interval
      type: string
      enum:
        - SUPPORTED_AREA
        - PART_OF_AREA_NOT_SUPPORTED
        - AREA_NOT_SUPPORTED
        - DENSITY_BELOW_PRIVACY_THRESHOLD
        - TIME_INTERVAL_NO_DATA_FOUND
    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP response status code
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
  responses:
    Generic400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              summary: Generic Invalid Argument
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Client specified an invalid argument, request body or query param."
            GENERIC_400_TIME_INTERVAL_NOT_SATISFIABLE:
              value:
                status: 400
                code: REGION_DEVICE_COUNT.TIME_INVALID_ARGUMENT
                message: "starttime and endtime cannot be passed separately. Either both are passed or neither is passed."
            GENERIC_400_INVALID_END_DATE:
              value:
                status: 400
                code: REGION_DEVICE_COUNT.INVALID_END_DATE
                message: "Indicated endTime is earlier than the startTime."
            GENERIC_400_INVALID_CIRCLE_AREA:
              value:
                status: 400
                code: REGION_DEVICE_COUNT.INVALID_CIRCLE_AREA
                message: "Missing circle center or radius."
            GENERIC_400_INVALID_POLYGON_AREA:
              value:
                status: 400
                code: REGION_DEVICE_COUNT.INVALID_POLYGON_AREA
                message: "The area is not a polygon shape or has an arbitrary complexity."
            
    Generic401:
      description: Unauthorized
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: Request cannot be authenticated
              value:
                status: 401
                code: UNAUTHENTICATED
                message: Request not authenticated due to missing, invalid, or expired credentials.
            GENERIC_401_AUTHENTICATION_REQUIRED:
              description: New authentication is needed, authentication is no longer valid
              value:
                status: 401
                code: AUTHENTICATION_REQUIRED
                message: New authentication is required.
    Generic403:
      description: Client does not have sufficient permission
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          examples:
            PermissionDenied:
              value:
                status: 403
                code: PERMISSION_DENIED
                message: "Client does not have sufficient permissions to perform this action"
    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
    Generic405:
      description: Method Not Allowed
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_405_METHOD_NOT_ALLOWED:
              description: Invalid HTTP verb used with a given endpoint
              value:
                status: 405
                code: METHOD_NOT_ALLOWED
                message: The requested method is not allowed/supported on the target resource.
    Generic429:
      description: Too Many Requests
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_429_QUOTA_EXCEEDED:
              description: Request is rejected due to exceeding a business quota limit
              value:
                status: 429
                code: QUOTA_EXCEEDED
                message: Either out of resource quota or reaching rate limiting.
            GENERIC_429_TOO_MANY_REQUESTS:
              description: API Server request limit is overpassed
              value:
                status: 429
                code: TOO_MANY_REQUESTS
                message: Either out of resource quota or reaching rate limiting.
    Generic500:
      description: Internal Server Error
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_500_INTERNAL:
              description: Problem in Server side. Regular Server Exception
              value:
                status: 500
                code: INTERNAL
                message: Unknown server error. Typically a server bug.
    Generic503:
      description: Service Unavailable
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_503_UNAVAILABLE:
              description: Service is not available. Temporary situation usually related to maintenance process in the server side
              value:
                status: 503
                code: UNAVAILABLE
                message: Service Unavailable.
    Generic504:
      description: Gateway Timeout
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_504_TIMEOUT:
              description: API Server Timeout
              value:
                status: 504
                code: TIMEOUT
                message: Request timeout exceeded.
  examples:
    RETRIEVAL_CIRCLE:
      value:
        area:
          areaType: CIRCLE
          center:
            latitude: 45.754114
            longitude: 4.860374
          radius: 800
        starttime: "2023-07-03T14:27:08.312+02:00"
        endtime: "2023-07-04T14:27:08.312+02:00"
        filter:
          roamingStatus: ["roaming"]
          deviceType: ["human device","IoT device"]
    RETRIEVAL_POLYGON:
      value:
        area:
          areaType: POLYGON
          boundary:
            - latitude: 45.754114
              longitude: 4.860374
            - latitude: 45.753845
              longitude: 4.863185
        starttime: "2023-07-03T14:27:08.312+02:00"
        endtime: "2023-07-04T14:27:08.312+02:00"
        filter:
          roamingStatus: ["non-roaming"]
          deviceType: ["other"]
    SUPPORTED_AREA:
      value:
        count: 100
        status: SUPPORTED_AREA
    PART_OF_AREA_NOT_SUPPORTED:
      value:
        count: 100
        status: PART_OF_AREA_NOT_SUPPORTED
    AREA_NOT_SUPPORTED:
      value:
        status: AREA_NOT_SUPPORTED
    DENSITY_BELOW_PRIVACY_THRESHOLD:
      value:
        status: DENSITY_BELOW_PRIVACY_THRESHOLD
